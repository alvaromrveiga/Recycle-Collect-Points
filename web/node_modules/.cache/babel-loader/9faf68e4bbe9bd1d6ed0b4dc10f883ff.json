{"ast":null,"code":"var _jsxFileName = \"/home/alvaro/git/ecoleta-nlw/web/src/pages/CreatePoint/index.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Map, TileLayer, Marker } from 'react-leaflet';\nimport api from '../../services/api';\nimport axios from 'axios';\nimport './styles.css';\nimport logo from \"../../assets/logo.svg\";\nimport { FiArrowLeft } from 'react-icons/fi';\n\nconst CreatePoint = () => {\n  //array ou objecto: manualmente informar o tipo da variável\n  const [itens, setItens] = useState([]);\n  const [ufs, setUfs] = useState([]); //array de objetos\n\n  const [cities, setCities] = useState([]);\n  const [initialPosition, setInitialPosition] = useState([0, 0]);\n  const [selectedUf, setSelectedUF] = useState('0');\n  const [selectedCity, setSelectedCity] = useState('0');\n  const [selectedPosition, setSelectedPosition] = useState([0, 0]); //quando o array [] está vazio, a função só é executada uma vez, não importa quantas vezes CreatePoint é chamado\n\n  useEffect(() => {\n    api.get('itens').then(response => {\n      setItens(response.data);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get('https://servicodados.ibge.gov.br/api/v1/localidades/estados?orderBy=nome').then(response => {\n      const ufNames = response.data.map(uf => uf.sigla);\n      setUfs(ufNames);\n    });\n  }, []);\n  useEffect(() => {\n    //carrega as cidades sempre que a UF mudar\n    if (selectedUf === '0') {\n      return;\n    }\n\n    axios.get(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios?orderBy=nome`).then(response => {\n      const cityNames = response.data.map(city => city.nome);\n      setCities(cityNames);\n    });\n  }, [selectedUf]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      console.log('teste');\n      console.log(position);\n    });\n  });\n\n  function handleSelectUf(event) {\n    const uf = event.target.value;\n    setSelectedUF(uf);\n  }\n\n  function handleSelectCity(event) {\n    const city = event.target.value;\n    setSelectedUF(city);\n  }\n\n  function handleMapClick(event) {\n    setSelectedPosition([event.latlng.lat, event.latlng.lng]);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-create-point\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"Ecoleta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: '/',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FiArrowLeft, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }), \"Voltar para home\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"Cadastro do \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  }), \" ponto de coleta\"), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, \"Dados\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, \"Nome da entidade\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }, \"E-mail:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    id: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"whatsapp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 29\n    }\n  }, \"Whatsapp\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"whatsapp\",\n    id: \"whatsapp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 25\n    }\n  }, \"Endere\\xE7os\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }, \"Selecione o endere\\xE7o no mapa\")), /*#__PURE__*/React.createElement(Map, {\n    center: [-15.8259668, -47.9276436],\n    zoom: 11,\n    onClick: handleMapClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: selectedPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }\n  }, \"Endere\\xE7o\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"address\",\n    id: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"uf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 29\n    }\n  }, \"Estado (UF)\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleSelectUf,\n    value: selectedUf,\n    name: \"uf\",\n    id: \"uf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 33\n    }\n  }, \"Selecione uma UF\"), ufs.map(uf => /*#__PURE__*/React.createElement(\"option\", {\n    key: uf,\n    value: uf,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 37\n    }\n  }, uf)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 29\n    }\n  }, \"Cidade\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleSelectCity,\n    value: selectedCity,\n    name: \"city\",\n    id: \"city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 33\n    }\n  }, \"Selecione a cidade\"), cities.map(city => /*#__PURE__*/React.createElement(\"option\", {\n    key: city,\n    value: city,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 37\n    }\n  }, city)))))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }\n  }, \"\\xCDtens de coleta\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  }, \"Selecione um ou mais itens abaixo\")), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"items-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 21\n    }\n  }, itens.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: item.image_url,\n    alt: item.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 33\n    }\n  }, item.title))))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, \"Cadastrar ponto de coleta\")));\n};\n\nexport default CreatePoint;","map":{"version":3,"sources":["/home/alvaro/git/ecoleta-nlw/web/src/pages/CreatePoint/index.tsx"],"names":["React","useEffect","useState","Link","Map","TileLayer","Marker","api","axios","FiArrowLeft","CreatePoint","itens","setItens","ufs","setUfs","cities","setCities","initialPosition","setInitialPosition","selectedUf","setSelectedUF","selectedCity","setSelectedCity","selectedPosition","setSelectedPosition","get","then","response","data","ufNames","map","uf","sigla","cityNames","city","nome","navigator","geolocation","getCurrentPosition","position","console","log","handleSelectUf","event","target","value","handleSelectCity","handleMapClick","latlng","lat","lng","logo","item","id","image_url","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAAwD,OAAxD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,MAAzB,QAAuC,eAAvC;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,cAAP;;AAEA,SAASC,WAAT,QAA4B,gBAA5B;;AAgBA,MAAMC,WAAW,GAAG,MAAM;AACtB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAW,EAAX,CAA9B,CAHsB,CAGwB;;AAC9C,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAW,EAAX,CAApC;AAEA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAtD;AAEA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAS,GAAT,CAA5C;AACA,QAAM,CAACmB,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAS,GAAT,CAAhD;AACA,QAAM,CAACqB,gBAAD,EAAmBC,mBAAnB,IAA0CtB,QAAQ,CAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAAxD,CAVsB,CAYtB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,GAAG,CAACkB,GAAJ,CAAQ,OAAR,EAAiBC,IAAjB,CAAsBC,QAAQ,IAAI;AAC9Bf,MAAAA,QAAQ,CAACe,QAAQ,CAACC,IAAV,CAAR;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA3B,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,KAAK,CACAiB,GADL,CAC6B,0EAD7B,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,YAAME,OAAO,GAAGF,QAAQ,CAACC,IAAT,CAAcE,GAAd,CAAkBC,EAAE,IAAIA,EAAE,CAACC,KAA3B,CAAhB;AACAlB,MAAAA,MAAM,CAACe,OAAD,CAAN;AACH,KALL;AAMH,GAPQ,EAON,EAPM,CAAT;AAUA5B,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIkB,UAAU,KAAK,GAAnB,EAAwB;AACpB;AACH;;AACDX,IAAAA,KAAK,CACAiB,GADL,CACgC,+DAA8DN,UAAW,0BADzG,EAEKO,IAFL,CAEUC,QAAQ,IAAI;AACd,YAAMM,SAAS,GAAGN,QAAQ,CAACC,IAAT,CAAcE,GAAd,CAAkBI,IAAI,IAAIA,IAAI,CAACC,IAA/B,CAAlB;AACAnB,MAAAA,SAAS,CAACiB,SAAD,CAAT;AACH,KALL;AAMH,GAXQ,EAWN,CAACd,UAAD,CAXM,CAAT;AAaAlB,EAAAA,SAAS,CAAC,MAAM;AACZmC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAI;AACjDC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,KAHD;AAIH,GALQ,CAAT;;AAOA,WAASG,cAAT,CAAwBC,KAAxB,EAA+D;AAC3D,UAAMZ,EAAE,GAAGY,KAAK,CAACC,MAAN,CAAaC,KAAxB;AAEAzB,IAAAA,aAAa,CAACW,EAAD,CAAb;AACH;;AAED,WAASe,gBAAT,CAA0BH,KAA1B,EAAiE;AAC7D,UAAMT,IAAI,GAAGS,KAAK,CAACC,MAAN,CAAaC,KAA1B;AAEAzB,IAAAA,aAAa,CAACc,IAAD,CAAb;AACH;;AAED,WAASa,cAAT,CAAwBJ,KAAxB,EAAkD;AAC9CnB,IAAAA,mBAAmB,CAAC,CAACmB,KAAK,CAACK,MAAN,CAAaC,GAAd,EAAmBN,KAAK,CAACK,MAAN,CAAaE,GAAhC,CAAD,CAAnB;AACH;;AAED,sBACI;AAAK,IAAA,EAAE,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,GAAG,EAAEC,IAAV;AAAgB,IAAA,GAAG,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,qBAFJ,CADJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,qBADJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CADJ,eAKI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,EAAE,EAAC,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CALJ,eAcI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,EAAE,EAAC,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,eASI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,EAAE,EAAC,UAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CATJ,CAdJ,CAHJ,eAqCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFJ,CADJ,eAMI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,CAAC,UAAF,EAAc,CAAC,UAAf,CAAb;AAAyC,IAAA,IAAI,EAAE,EAA/C;AAAmD,IAAA,OAAO,EAAEJ,cAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,WAAW,EAAC,2EADhB;AAEI,IAAA,GAAG,EAAC,oDAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAExB,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CANJ,eAeI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,IAAI,EAAC,SAFT;AAGI,IAAA,EAAE,EAAC,SAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAfJ,eAwBI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AACI,IAAA,QAAQ,EAAEmB,cADd;AAEI,IAAA,KAAK,EAAEvB,UAFX;AAGI,IAAA,IAAI,EAAC,IAHT;AAII,IAAA,EAAE,EAAC,IAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI;AAAQ,IAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANJ,EAOKN,GAAG,CAACiB,GAAJ,CAASC,EAAD,iBACL;AACI,IAAA,GAAG,EAAEA,EADT;AAEI,IAAA,KAAK,EAAEA,EAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKA,EAHL,CADH,CAPL,CAFJ,CADJ,eAmBI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,IAAA,QAAQ,EAAEe,gBADd;AAEI,IAAA,KAAK,EAAEzB,YAFX;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,EAAE,EAAC,MAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI;AAAQ,IAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANJ,EAOKN,MAAM,CAACe,GAAP,CAAYI,IAAD,iBACR;AACI,IAAA,GAAG,EAAEA,IADT;AAEI,IAAA,KAAK,EAAEA,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKA,IAHL,CADH,CAPL,CAFJ,CAnBJ,CAxBJ,CArCJ,eAqGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFJ,CADJ,eAMI;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKvB,KAAK,CAACmB,GAAN,CAAUsB,IAAI,iBACX;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,GAAG,EAAED,IAAI,CAACE,SAAf;AAA0B,IAAA,GAAG,EAAEF,IAAI,CAACG,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOH,IAAI,CAACG,KAAZ,CAFJ,CADH,CADL,CANJ,CArGJ,eAqHI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCArHJ,CATJ,CADJ;AAqIH,CAtMD;;AAwMA,eAAe7C,WAAf","sourcesContent":["import React, { useEffect, useState, ChangeEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Map, TileLayer, Marker } from 'react-leaflet';\nimport api from '../../services/api';\nimport axios from 'axios';\nimport { LeafletMouseEvent } from 'leaflet';\n\nimport './styles.css';\nimport logo from '../../assets/logo.svg';\nimport { FiArrowLeft } from 'react-icons/fi';\n\ninterface Item {\n    id: number,\n    title: string,\n    image_url: string\n}\n\ninterface IBGE_Uf_Response {\n    sigla: string\n}\n\ninterface IBGE_City_Response {\n    nome: string\n}\n\nconst CreatePoint = () => {\n    //array ou objecto: manualmente informar o tipo da variável\n    const [itens, setItens] = useState<Item[]>([]);\n    const [ufs, setUfs] = useState<string[]>([]); //array de objetos\n    const [cities, setCities] = useState<string[]>([]);\n\n    const [initialPosition, setInitialPosition] = useState<[number, number]>([0, 0]);\n\n    const [selectedUf, setSelectedUF] = useState<string>('0');\n    const [selectedCity, setSelectedCity] = useState<string>('0');\n    const [selectedPosition, setSelectedPosition] = useState<[number, number]>([0, 0]);\n\n    //quando o array [] está vazio, a função só é executada uma vez, não importa quantas vezes CreatePoint é chamado\n    useEffect(() => {\n        api.get('itens').then(response => {\n            setItens(response.data);\n        })\n    }, []);\n\n    useEffect(() => {\n        axios\n            .get<IBGE_Uf_Response[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados?orderBy=nome')\n            .then(response => {\n                const ufNames = response.data.map(uf => uf.sigla);\n                setUfs(ufNames);\n            })\n    }, []);\n\n\n    useEffect(() => {\n        //carrega as cidades sempre que a UF mudar\n        if (selectedUf === '0') {\n            return;\n        }\n        axios\n            .get<IBGE_City_Response[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios?orderBy=nome`)\n            .then(response => {\n                const cityNames = response.data.map(city => city.nome);\n                setCities(cityNames);\n            })\n    }, [selectedUf]);\n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(position => {\n            console.log('teste');\n            console.log(position);\n        })\n    });\n\n    function handleSelectUf(event: ChangeEvent<HTMLSelectElement>) {\n        const uf = event.target.value;\n\n        setSelectedUF(uf);\n    }\n\n    function handleSelectCity(event: ChangeEvent<HTMLSelectElement>) {\n        const city = event.target.value;\n\n        setSelectedUF(city);\n    }\n\n    function handleMapClick(event: LeafletMouseEvent) {\n        setSelectedPosition([event.latlng.lat, event.latlng.lng]);\n    }\n\n    return (\n        <div id='page-create-point'>\n            <header>\n                <img src={logo} alt=\"Ecoleta\" />\n                <Link to={'/'} >\n                    <FiArrowLeft />\n                    Voltar para home\n                </Link>\n            </header>\n\n            <form>\n                <h1>Cadastro do <br /> ponto de coleta</h1>\n\n                <fieldset>\n                    <legend>\n                        <h2>Dados</h2>\n                    </legend>\n\n                    <div className=\"field\">\n                        <label htmlFor=\"name\">Nome da entidade</label>\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            id=\"name\"\n                        />\n                    </div>\n\n                    <div className=\"field-group\">\n                        <div className=\"field\">\n                            <label htmlFor=\"email\">E-mail:</label>\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"email\"\n                            />\n                        </div>\n                        <div className=\"field\">\n                            <label htmlFor=\"whatsapp\">Whatsapp</label>\n                            <input\n                                type=\"text\"\n                                name=\"whatsapp\"\n                                id=\"whatsapp\"\n                            />\n                        </div>\n                    </div>\n                </fieldset>\n\n                <fieldset>\n                    <legend>\n                        <h2>Endereços</h2>\n                        <span>Selecione o endereço no mapa</span>\n                    </legend>\n\n                    <Map center={[-15.8259668, -47.9276436]} zoom={11} onClick={handleMapClick}>\n                        <TileLayer\n                            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        />\n\n                        <Marker position={selectedPosition} />\n                    </Map>\n\n                    <div className=\"field\">\n                        <label htmlFor=\"address\">Endereço</label>\n                        <input\n                            type=\"text\"\n                            name='address'\n                            id='address'\n                        />\n                    </div>\n\n                    <div className=\"field-group\">\n                        <div className=\"field\">\n                            <label htmlFor=\"uf\">Estado (UF)</label>\n                            <select\n                                onChange={handleSelectUf}\n                                value={selectedUf}\n                                name=\"uf\"\n                                id=\"uf\"\n                            >\n                                <option value=\"0\">Selecione uma UF</option>\n                                {ufs.map((uf) => (\n                                    <option\n                                        key={uf}\n                                        value={uf}>\n                                        {uf}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        <div className=\"field\">\n                            <label htmlFor=\"city\">Cidade</label>\n                            <select\n                                onChange={handleSelectCity}\n                                value={selectedCity}\n                                name=\"city\"\n                                id=\"city\"\n                            >\n                                <option value=\"0\">Selecione a cidade</option>\n                                {cities.map((city) => (\n                                    <option\n                                        key={city}\n                                        value={city}>\n                                        {city}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                </fieldset>\n\n                <fieldset>\n                    <legend>\n                        <h2>Ítens de coleta</h2>\n                        <span>Selecione um ou mais itens abaixo</span>\n                    </legend>\n\n                    <ul className=\"items-grid\">\n                        {itens.map(item => (\n                            <li key={item.id}>\n                                <img src={item.image_url} alt={item.title} />\n                                <span>{item.title}</span>\n                            </li>\n                        ))}\n                    </ul>\n                </fieldset>\n\n                <button type='submit'>\n                    Cadastrar ponto de coleta\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default CreatePoint;"]},"metadata":{},"sourceType":"module"}